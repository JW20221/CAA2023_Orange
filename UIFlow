from m5stack import *
from m5stack_ui import *
from uiflow import *
import time
import wifiCfg
import urequests
import unit
remoteInit()

screen = M5Screen()
screen.clean_screen()
screen.set_screen_bg_color(0xFFFFFF)
pir_0 = unit.get(unit.PIR, unit.PORTB)


value = None
message = None
x = None
SlideVal = None
SensorTemp = None
screenNumber = None
armed = None



SetPointSlider = M5Slider(x=162, y=792, w=240, h=30, min=0, max=100, bg_c=0xa0a0a0, color=0x08A2B0, parent=None)
Switch1 = M5Switch(x=534, y=455, w=70, h=30, bg_c=0xCCCCCC, color=0x0288FB, parent=None)
previous = M5Label('<', x=62, y=214, color=0x000, font=FONT_MONT_26, parent=None)
next = M5Label('>', x=240, y=214, color=0x000, font=FONT_MONT_26, parent=None)
MainLabel = M5Label('Connecting', x=84, y=129, color=0x000, font=FONT_MONT_26, parent=None)
temperature = M5Label('N/A C', x=250, y=33, color=0x000, font=FONT_MONT_14, parent=None)
SliderDisplayLabel = M5Label('0', x=134, y=156, color=0x000, font=FONT_MONT_30, parent=None)
ThemostatTitle = M5Label('Thermostat', x=26, y=33, color=0x000, font=FONT_MONT_30, parent=None)
NightLight = M5Label('Night Light', x=27, y=33, color=0x000, font=FONT_MONT_30, parent=None)
Alarm = M5Label('Alarm', x=24, y=33, color=0x000, font=FONT_MONT_30, parent=None)
MotionDetected = M5Label('Motion Detected', x=106, y=73, color=0x000, font=FONT_MONT_14, parent=None)
Arm = M5Btn(text='Arm', x=23, y=111, w=130, h=80, bg_c=0xFFFFFF, text_c=0x000000, font=FONT_MONT_22, parent=None)
Disarm = M5Btn(text='Disarm', x=172, y=111, w=130, h=80, bg_c=0xFFFFFF, text_c=0x000000, font=FONT_MONT_22, parent=None)

from numbers import Number


# Describe this function...
def ShowThermostat():
  global value, message, x, SlideVal, SensorTemp, screenNumber, armed
  SetPointSlider.set_range(10, 30)
  SetPointSlider.set_align(ALIGN_IN_BOTTOM_MID, x=0, y=(-60), ref=screen.obj)
  SetPointSlider.set_hidden(False)
  temperature.set_align(ALIGN_IN_TOP_RIGHT, x=(-20), y=20, ref=screen.obj)
  temperature.set_text_font(FONT_MONT_18)
  temperature.set_hidden(True)
  temperature.set_text(str(SensorTemp))
  SliderDisplayLabel.set_align(ALIGN_CENTER, x=0, y=(-10), ref=screen.obj)
  SliderDisplayLabel.set_hidden(False)
  ThemostatTitle.set_hidden(False)
  ThemostatTitle.set_text_color(0x33ccff)
  previous.set_hidden(False)
  next.set_hidden(False)

# Describe this function...
def ClearScreen():
  global value, message, x, SlideVal, SensorTemp, screenNumber, armed
  SetPointSlider.set_hidden(True)
  Switch1.set_hidden(True)
  Alarm.set_hidden(True)
  temperature.set_hidden(True)
  SliderDisplayLabel.set_hidden(True)
  ThemostatTitle.set_hidden(True)
  previous.set_hidden(True)
  next.set_hidden(True)
  NightLight.set_hidden(True)
  MotionDetected.set_hidden(True)
  Arm.set_hidden(True)
  Disarm.set_hidden(True)

# Describe this function...
def ShowSwitch():
  global value, message, x, SlideVal, SensorTemp, screenNumber, armed
  Switch1.set_hidden(False)
  Switch1.set_align(ALIGN_CENTER, x=0, y=45, ref=screen.obj)
  Switch1.set_size(100, 40)
  NightLight.set_hidden(False)
  NightLight.set_text_color(0xff6600)
  previous.set_hidden(False)
  next.set_hidden(False)

# Describe this function...
def MainLabelDisplay(message):
  global value, x, SlideVal, SensorTemp, screenNumber, armed
  MainLabel.set_text(str(message))
  MainLabel.set_align(ALIGN_CENTER, x=0, y=0, ref=screen.obj)
  MainLabel.set_hidden(False)
  wait(2)
  MainLabel.set_hidden(True)

# Describe this function...
def SetScreen():
  global value, message, x, SlideVal, SensorTemp, screenNumber, armed
  ClearScreen()
  if screenNumber==0:
    ShowThermostat()
  elif screenNumber==1:
    ShowSwitch()
  elif screenNumber==2:
    ShowElse()
  else:
    ShowThermostat()

# Describe this function...
def ShowElse():
  global value, message, x, SlideVal, SensorTemp, screenNumber, armed
  lcd.qrcode('http://flow-remote.m5stack.com/?remote=864311736210292736', 200, 10, 100)
  Alarm.set_hidden(False)
  Alarm.set_text_color(0x33cc00)
  previous.set_hidden(False)
  next.set_hidden(False)
  Arm.set_hidden(False)
  Disarm.set_hidden(False)

# Describe this function...
def arm():
  global value, message, x, SlideVal, SensorTemp, screenNumber, armed
  Arm.set_bg_color(0x66ff99)
  armed = 1
  rgb.setColorAll(0xcc33cc)
  Arm.set_btn_text('Armed')
  Disarm.set_bg_color(0xffffff)
  Disarm.set_btn_text('Disarm')

# Describe this function...
def disarm():
  global value, message, x, SlideVal, SensorTemp, screenNumber, armed
  Arm.set_bg_color(0xffffff)
  Disarm.set_bg_color(0xff9900)
  armed = 0
  rgb.setColorAll(0xff9900)
  Disarm.set_btn_text('Disarmed')
  Arm.set_btn_text('Arm')


def SetPointSlider_changed(value):
  global SlideVal, SensorTemp, screenNumber, message, armed, x
  SlideVal = SetPointSlider.get_value()
  if SlideVal < 20:
    SetPointSlider.set_bg_color(0x33ccff)
    SetPointSlider.set_color(0x3366ff)
  else:
    SetPointSlider.set_bg_color(0xffcc66)
    SetPointSlider.set_color(0xff9900)
  m5mqtt.publish(str('core/setpoint'), str(SlideVal), )
  SliderDisplayLabel.set_align(ALIGN_CENTER, x=0, y=(-30), ref=screen.obj)
  SliderDisplayLabel.set_text(str(SlideVal))
  if SlideVal < 20:
    SliderDisplayLabel.set_text_color(0x33ccff)
  else:
    SliderDisplayLabel.set_text_color(0xff9900)
  pass
SetPointSlider.changed(SetPointSlider_changed)

def Switch1_on():
  global SlideVal, SensorTemp, screenNumber, message, armed, x
  rgb.setColorAll(0xffffff)
  m5mqtt.publish(str('core/switch'), str('true'), )
  pass
Switch1.on(Switch1_on)

def Switch1_off():
  global SlideVal, SensorTemp, screenNumber, message, armed, x
  rgb.setColorAll(0x000000)
  m5mqtt.publish(str('core/switch'), str('false'), )
  pass
Switch1.off(Switch1_off)

def Arm_pressed():
  global SlideVal, SensorTemp, screenNumber, message, armed, x
  arm()
  pass
Arm.pressed(Arm_pressed)

def Disarm_pressed():
  global SlideVal, SensorTemp, screenNumber, message, armed, x
  disarm()
  pass
Disarm.pressed(Disarm_pressed)

def fun_sensor_setpoint_(topic_data):
  global SlideVal, SensorTemp, screenNumber, message, armed, x
  SlideVal = topic_data
  SetScreen()
  SetPointSlider.set_value(SlideVal)
  pass

def fun_sensor_temp_(topic_data):
  global SlideVal, SensorTemp, screenNumber, message, armed, x
  SensorTemp = topic_data
  SetScreen()
  pass

def buttonA_wasPressed():
  global SlideVal, SensorTemp, screenNumber, message, armed, x
  screenNumber = (screenNumber if isinstance(screenNumber, Number) else 0) + -1
  if screenNumber < 0:
    screenNumber = 2
  SetScreen()
  pass
btnA.wasPressed(buttonA_wasPressed)

def buttonC_wasPressed():
  global SlideVal, SensorTemp, screenNumber, message, armed, x
  screenNumber = (screenNumber if isinstance(screenNumber, Number) else 0) + 1
  if screenNumber > 2:
    screenNumber = 0
  SetScreen()
  pass
btnC.wasPressed(buttonC_wasPressed)

def _remote_Arm_Disarm(x):
  global SlideVal, SensorTemp, screenNumber, message, armed, pir_0, arm, ClearScreen, disarm, MainLabelDisplay, SetScreen, ShowElse, ShowSwitch, ShowThermostat 
  if x == 1:
    arm()
  else:
    disarm()


import urequests
import ujson

def logAlarmEvent(state):
    print('Sending logAlarmEvent request')
    url = 'https://us-central1-clean-pen-380815.cloudfunctions.net/logstate'
    headers = {'Content-Type': 'application/json'}
    data = {'state': state}
    response = urequests.post(url, headers=headers, data=ujson.dumps(data))

    if response.status_code == 200:
        print('Alarm event logged successfully.')
        return response.json()
    else:
        print('Failed to log alarm event. Error:', response.content)
        return None
ClearScreen()
try :
  MainLabelDisplay('Connecting')
  wifiCfg.doConnect('iot-unil', '4u6uch4hpY9pJ2f9')
  if wifiCfg.wlan_sta.isconnected():
    MainLabelDisplay('Connected')
  pass
except:
  MainLabel.set_text('Not Connected')
  wait(3)
  MainLabel.set_hidden(True)
screenNumber = 0
SetScreen()
previous.set_hidden(False)
next.set_hidden(False)
while True:
  while armed == 1:
    if (pir_0.state) == 1:
      speaker.playTone(220, 1, volume=6)
      rgb.setColorAll(0xff0000)
      logAlarmEvent(True)
      try:
        req = urequests.request(method='GET', url='https://maker.ifttt.com/trigger/motion_detected/json/with/key/nkR9benlLE7Uv7GIuePalPLNpwe8ttKDvX-o9MY4Ehb')
        gc.collect()
        req.close()
      except:
        pass
      wait(3)
    else:
      rgb.setColorAll(0x000000)
  wait_ms(2)

